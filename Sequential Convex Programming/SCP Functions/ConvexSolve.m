
function [NewReference] = ConvexSolve(SCP,Reference,ConvexProblemOptimizer,DiscreteCost,DiscreteDynamics,DiscreteConstraints,dims)

% Solve Cone Program

if SCP.FreeTime && ~SCP.AdaptiveMesh
    inputs = {DiscreteCost.Aphi,...
              DiscreteCost.Fphi,...
              DiscreteCost.rphi,...
              DiscreteCost.AL,...
              DiscreteCost.BL,...
              DiscreteCost.FL,...
              DiscreteCost.rL,...
              DiscreteDynamics.A,...
              DiscreteDynamics.Bm,...
              DiscreteDynamics.Bp,...
              DiscreteDynamics.F,...
              DiscreteDynamics.E,...
              DiscreteDynamics.r,...
              DiscreteConstraints.H0,...
              DiscreteConstraints.Hf,...
              DiscreteConstraints.l0,...
              DiscreteConstraints.lf,...
              Reference.x,...
              Reference.u,...
              Reference.p,...
              SCP.eta};
    if dims.nc ~= 0
        inputs = [inputs {Reference.c}];
    end
    if dims.ns ~= 0
        inputs = [inputs,...
                  {DiscreteConstraints.C,...
                  DiscreteConstraints.D,...
                  DiscreteConstraints.rp}];
    end
    [solution,infeasible] = ConvexProblemOptimizer{inputs};
    if infeasible
        error('Convex Subproblem was infeasible!');
    end
    NewReference.L = solution{1};
    NewReference.x = solution{2};
    NewReference.u = solution{3};
    NewReference.p = solution{4};
    NewReference.v = solution{5};
    NewReference.vic = solution{6};
    NewReference.vtc = solution{7};
    if dims.ns ~= 0
        NewReference.vs = solution{8};
    end
    NewReference.c = Reference.c;
end
if SCP.FreeTime && SCP.AdaptiveMesh
    inputs = {DiscreteCost.Aphi,...
              DiscreteCost.Fphi,...
              DiscreteCost.rphi,...
              DiscreteCost.AL,...
              DiscreteCost.BL,...
              DiscreteCost.FL,...
              DiscreteCost.rL,...
              DiscreteDynamics.A,...
              DiscreteDynamics.Bm,...
              DiscreteDynamics.Bp,...
              DiscreteDynamics.H,...
              DiscreteDynamics.E,...
              DiscreteDynamics.r,...
              DiscreteConstraints.H0,...
              DiscreteConstraints.Hf,...
              DiscreteConstraints.l0,...
              DiscreteConstraints.lf,...
              Reference.x,...
              Reference.u,...
              Reference.h,...
              SCP.eta};
    if dims.nc ~= 0
        inputs = [inputs {Reference.c}];
    end
    if dims.ns ~= 0
        inputs = [inputs,...
                  {DiscreteConstraints.C,...
                  DiscreteConstraints.D,...
                  DiscreteConstraints.rp}];
    end
    [solution,infeasible] = ConvexProblemOptimizer{inputs};
    if infeasible
        error('Convex Subproblem was infeasible!');
    end
    NewReference.L = solution{1};
    NewReference.x = solution{2};
    NewReference.u = solution{3};
    NewReference.p = solution{4};
    NewReference.v = solution{5};
    NewReference.vic = solution{6};
    NewReference.vtc = solution{7};
    if dims.ns ~= 0
        NewReference.vs = solution{8};
    end
    NewReference.c = Reference.c;
end
if ~SCP.FreeTime
    inputs = {DiscreteCost.Aphi,...
              DiscreteCost.Fphi,...
              DiscreteCost.rphi,...
              DiscreteCost.AL,...
              DiscreteCost.BL,...
              DiscreteCost.FL,...
              DiscreteCost.rL,...
              DiscreteDynamics.A,...
              DiscreteDynamics.Bm,...
              DiscreteDynamics.Bp,...
              DiscreteDynamics.E,...
              DiscreteDynamics.r,...
              DiscreteConstraints.H0,...
              DiscreteConstraints.Hf,...
              DiscreteConstraints.l0,...
              DiscreteConstraints.lf,...
              Reference.x,...
              Reference.u,...
              SCP.eta};
    if dims.nc ~= 0
        inputs = [inputs {Reference.c}];
    end
    if dims.ns ~= 0
        inputs = [inputs,...
                  {DiscreteConstraints.C,...
                  DiscreteConstraints.D,...
                  DiscreteConstraints.rp}];
    end
    [solution,infeasible] = ConvexProblemOptimizer{inputs};
    if infeasible
        error('Convex Subproblem was infeasible!');
    end
    NewReference.L = solution{1};
    NewReference.x = solution{2};
    NewReference.u = solution{3};
    NewReference.p = solution{4};
    NewReference.v = solution{5};
    NewReference.vic = solution{6};
    NewReference.vtc = solution{7};
    if dims.ns ~= 0
        NewReference.vs = solution{8};
    end
    NewReference.c = Reference.c;
end

end